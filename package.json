{
  "name": "lensfinder-monorepo",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "workspaces": [
    "client",
    "server"
  ],
  "scripts": {
    "predev": "kill-port 3001 || true && kill-port 3000 || true",
    "dev:client": "npm --workspace client run dev",
    "dev:server": "cross-env NODE_ENV=development npm --workspace server run dev",
    "predev:server": "kill-port 3001 || true",
    "predev:client": "kill-port 3000 || true",
    "dev": "concurrently -n server,client -c blue,green -k=0 -s first-success \"npm --workspace server run dev\" \"wait-on tcp:3001 && npm --workspace client run dev\"",
    "build:client": "npm --workspace client run build",
    "build:server": "npm --workspace server run build",
    "build": "npm run build:client && npm run build:server",
    "test:client": "npm --workspace client run test",
    "test:server": "if [ \"$SKIP_DB_TESTS\" = \"1\" ] || [ \"$SKIP_DB_TESTS\" = \"true\" ]; then npm --workspace server run test; else npm run db:up && npm run db:migrate && npm --workspace server run test; fi",
    "test": "npm run test:server && npm run test:client",
    "test:e2e": "docker info >/dev/null 2>&1 || { echo 'Docker daemon not running; skipping e2e tests.'; exit 0; }; playwright test",
    "test:e2e:smoke": "docker info >/dev/null 2>&1 || { echo 'Docker daemon not running; skipping e2e smoke.'; exit 0; }; playwright test tests/e2e/clickthrough-smoke.spec.ts",
    "start:client": "npm --workspace client run start",
    "start:server": "npm --workspace server run start",
    "prestart": "kill-port 3001 || true && kill-port 3000 || true",
    "start": "concurrently -n client,server -c green,blue \"npm run start:client\" \"npm run start:server\"",
    "dev:server:pg": "cross-env NODE_ENV=development DB_DRIVER=pg PORT=${PORT:-3001} npm --workspace server run dev",
    "preplaywright:server": "kill-port ${PORT:-3001} || true",
    "playwright:server": "npm run preplaywright:server && npm run build:server && cross-env VITE_E2E_SMOKE=1 npm --workspace client run build && npm --workspace server run start",
    "start:server:e2e": "cross-env NODE_ENV=development DB_DRIVER=pg PORT=3001 node server/dist/index.js",
    "db:up": "docker compose --env-file .env -f infra/docker/docker-compose.db.yml -p lensfinder-db up -d",
    "db:up:prod": "docker compose --env-file .env -f infra/docker/docker-compose.db.yml -p lensfinder-db up -d",
    "db:down": "docker compose --env-file .env -f infra/docker/docker-compose.db.yml -p lensfinder-db down -v",
    "db:down:prod": "docker compose --env-file .env -f infra/docker/docker-compose.db.yml -p lensfinder-db down -v",
    "db:logs": "docker compose --env-file .env -f infra/docker/docker-compose.db.yml -p lensfinder-db logs -f",
    "db:logs:prod": "docker compose --env-file .env -f infra/docker/docker-compose.db.yml -p lensfinder-db logs -f",
    "db:migrate": "tsx db/migrate.ts",
    "start:ordered": "concurrently -n server,client -c blue,green -k=0 -s first-success \"npm run start:server\" \"wait-on tcp:3001 && npm run start:client\"",
    "stack:up": "npm run build:server && npm run test:server && npm run build:client && npm run test:client && npm run start:ordered",
    "deploy:gen": "node scripts/generate-deploy.mjs",
    "deploy:gen:dev": "node scripts/generate-deploy.mjs",
    "deploy:compose:up": "docker compose -f infra/docker/docker-compose.yml --env-file .env up -d --build",
    "deploy:compose:down": "docker compose -f infra/docker/docker-compose.yml --env-file .env down -v",
    "stack:up:docker": "npm run deploy:gen && docker compose -f infra/docker/docker-compose.yml --env-file .env up -d --build",
    "stack:down:docker": "docker compose -f infra/docker/docker-compose.yml --env-file .env down",
    "stack:clean:docker": "docker compose -f infra/docker/docker-compose.yml --env-file .env down -v",
    "stack:logs:docker": "docker compose -f infra/docker/docker-compose.yml --env-file .env logs -f",
    "deploy:k8s:apply": "kubectl apply -k infra/k8s/",
    "deploy:k8s:delete": "kubectl delete -k infra/k8s/",
    "ci:fast": "npm run test:server && npm run test:client",
    "ci:verify": "npm run build && npm run test && npm run test:e2e",
    "test:precommit": "SKIP_DB_TESTS=1 npm run ci:fast && npm run build",
    "data:lenses:fetch": "node db/data/scripts/fetch-lens-specs.mjs",
    "data:lenses:update": "node db/data/scripts/fetch-lens-specs.mjs --write",
    "prepare": "husky install"
  },
  "devDependencies": {
    "@playwright/test": "1.46.1",
    "concurrently": "8.2.2",
    "cross-env": "7.0.3",
    "kill-port": "2.0.1",
    "wait-on": "7.2.0",
    "husky": "9.0.11"
  },
  "overrides": {
    "graphql": "16.9.0"
  }
}


