/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/lenses/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get recommended lenses ranked by overall score */
        post: operations["postRecommendations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Budget: {
            /** Format: float */
            target: number;
            isFlexible: boolean;
        };
        Priorities: {
            portability: number;
            lowLight: number;
            zoom: number;
        };
        RecommendationRequest: {
            lensMount: string;
            budget: components["schemas"]["Budget"];
            useCases: string[];
            priorities: components["schemas"]["Priorities"];
        };
        Lens: {
            id: string;
            name: string;
            brand: string;
            lensMount: string;
            /** Format: float */
            price: number;
            /** Format: float */
            weight: number;
            /** Format: float */
            minFocalLength: number;
            /** Format: float */
            maxFocalLength: number;
            /** Format: float */
            maxAperture: number;
            isWeatherSealed: boolean;
            hasImageStabilization: boolean;
            isMacro: boolean;
            imageUrl?: string | null;
        };
        ScoredLens: components["schemas"]["Lens"] & {
            /** Format: float */
            overallScore: number;
            /** Format: float */
            portabilityScore: number;
            /** Format: float */
            lowLightScore: number;
            /** Format: float */
            zoomScore: number;
            /** Format: float */
            valueScore: number;
            tags?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    postRecommendations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecommendationRequest"];
            };
        };
        responses: {
            /** @description Ranked recommendations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoredLens"][];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
